%!PS-Adobe-2.0 EPSF-1.2
%%Title: vdcoblique.ps
%%Creator: Frame 5.1
%%CreationDate: Apr 21 11:18
%%For:fissum fissum
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 89 321 523 698
%%BeginPreview: 435 376 1 376
% 00000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000001f80000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000001f80000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000003f80000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000003f80000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000007f80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000001ff80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003ff80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003ff80000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000001ff8000000000000000f000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000007f80000000000000010c00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000007b80000000000000064600000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000f000000000000000080180000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000f000000000000000301060000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000f000000000000000400018000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000f000000000000001c44446000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000001f000000000000002000001000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000001e80000000000000d010101c00000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000001e400000000000010000000300000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003c2000000000000644444444c0000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003c200003800000180000000020000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003c200874400000211101110118000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000003c100884400000c00000000006000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000781008e3800001444444444445800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000078080870000006000000000000600000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000078080810000008101010101010100000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000070087e100000300000000000000c0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000f0080810000044444444444444470000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000f00809e000018000000000000000c000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000f0040000000301010101010101013000000000000000000
% 000000000000000000000000000000000000000000000000000000000000001e0040000000c00000000000000000800000000000000000
% 000000000000000000000000000000000000000000000000000000000000001e0040000003444444444444444444600000000000000000
% 000000000000000000000000000000000000000000000000000000000000001e0040000004000000000000000000180000000000000000
% 000000000000000000000000000000000000000000000000000000000000001c0040000019010101010101010101060000000000000000
% 000000000000000000000000000000000000000000000000000000000000003c0040000020000000000000000000018000000000000000
% 000000000000000000000000000000000000000000000000000000000000003c00400000c4444444444444444444444000000000000000
% 000000000000000000000000000000000000000000000000000000000000003c0040000100000000000000000000003000000000000000
% 00000000000000000000000000000000000000000000000000000000000000780020000710111011101110111011101c00000000000000
% 00000000000000000000000000000000000000000000000000000000000000780020000800000000000000000000000300000000000000
% 00000000000000000000000000000000000000000000000000000000000000780020003444444444444444444444444480000000000000
% 0000000000000000000000000000000000000000000000000000000000000078002000c000000000000000000000000060000000000000
% 00000000000000000000000000000000000000000000000000000000000000f00020c10101010101010101010101010118000000000000
% 00000000000000000000000000000000000000000000000000000000000000f00021060000000000000000000000000006000000000000
% 00000000000000000000000000000000000000000000000000000000000000f000260c4444444444444444444444444445800000000000
% 00000000000000000000000000000000000000000000000000000000000001e00028300000000000000000000000000000400000000000
% 00000000000000000000000000000000000000000000000000000000000001e00030501010101010101010101010101010300000000000
% 00000000000000000000000000000000000000000000000000000000000001e000418000000000000000000000000000000c0000000000
% 00000000000000000000000000000000000000000000000000000000000001e00182444444444444444444444444444444470000000000
% 00000000000000000000000000000000000380000000000000000000000003c0020c00000000000000000000000000000000c000000000
% 00000000000000000000000000040010087440000080400000400000000003c00c11010101010101010101010101010101012000000000
% 00000000000000000000000000000010088440000400400400000100000003c01060000000000000000000000000000000001800000000
% 0000000000000000000001000000801008e382004c00400c800003004000038061c4444444444444444444444444444444444600000000
% 0000000000000000000001e79fecf390087003ce7d8f4f0cee47bf1e768007808200000000000000000000000000000000000180000000
% 000000000000000000000128522491900810026644905f04864fc121468007830c11101110111011101110111011101110111060000000
% 000000000000000000000128522492907e10022a449058048a4c412142800784100000000f000000000000000000000000000010000000
% 00000000000000000000012c522496900810027a449959049a4ce53143000f186444444452c4444444444444444444444444444c000000
% 000000000000000000000127bba493d809e003cf668e6e06cf47399e61000f208000000062200000000000000000000000000003000000
% 0000000000000000000000000000000000000200000000000040000002000fc301010101c2190101010101010101010101010101c00000
% 000000000000000000000000000000000000020000000000014000000a000f040000000342060000000000000000000000000000200000
% 000000000000000000000000000000000000070000000000018000000c001e1c444444444201c444444444444444444444444444580000
% 0000000000000000000000000000000000000000000000000000000000001e200000001842006000000000000000000000000000060000
% 0000000000000000000000000000000000000000000000000000000000001ed01010106842001010101010101010101010101010118000
% 0000000000000000000000000000000000000000000000000000000000003f00000000c842000c00000000000000000000000000006000
% 0000000000000000000000000000000000000000000000000000000000003c444444470842000344444444444444444444444444445000
% 0000000000000000000000000000000000000000000000000000000000003c0000000508420000c0000000000000000000000000000c00
% 0000000000000000000000000000000000000000000000000000000000003d010101190842000031010101010101010101010101010300
% 000000000000000000000000000000000000000000000000000000000000f8000000210842000008000000000000000000000000000380
% 0000000000000000000000000000000000000000000000000000000000017c444444e10842000006444444444444444444444444444480
% 00000000000000000000000000000000000000000000000000000000000678000001210842000001800000000000000000000000001880
% 00000000000000000000000000000000000000000000000000000000000970111016210842000000701110111011101110111011103180
% 000000000000000000000000000000000000000000000000000000000030f000001c21084200000018000000000000000000000000c080
% 000000000000000000000000000000000000000000000000000000000044f4444474210842000000064444444444444444444444454480
% 000000000000000000000000000000000000000000000000000000000180f00000c4210842000000010000000000000000000000060080
% 000000000000000000000000000000000000000000000000000000000701e101018421084200000000c101010101010101010101090180
% 000000000000000000000000000000000000000000000000000000000801e0000684210842000000003000000000000000000000300080
% 000000000000000000000000000000000000000000000000000000003445e4444884210842000000000c44444444444444444444c44780
% 000000000000000000000000000000000000000000000000000000004001c0003084210842000000000300000000000000000001000400
% 000000000000000000000000000000000000000000000000000000019013d010d084210842000000000090101010101010101016101800
% 000000000000000000000000000000000000000000000000000000020003c0019084210842000000000060000000000000000008002000
% 0000000000000000000000000000000000000000000000000000000c4447c446108421084200000000001c44444444444444447444c000
% 000000000000000000000000000000000000000000000000000000100003800e1084210842000000000006000000000000000040010000
% 00000000000000000000000000000000000000000000000000000061010781321084210842000000000001810101010101010181060000
% 00000000000000000000000000000000000000000000000000000080000780421084210842000000000000400000000000000200080000
% 00000000000000000000000000000000000000000000000000000344444745c21084210842000000000000344444444444444c44700000
% 00000000000000000000000000000000000000000000000000000c00000f064210842108420000000000000c0000000000003000c00000
% 00000000000000000000000000000000000000000000000000001011101f1c421084210842000000000000031011101110115011000000
% 00000000000000000000000000000000000000000000000000006000000f3842108421084200000000000000c000000000018006000000
% 0000000000000000000000000000000000000000000000000000c444444e68421084210842000000000000002444444444464448000000
% 00000000000000000000000000000000000000000000000000030000001f884210842108420000000000000018000000000c0030000000
% 00000000000000000000000000000000000000000000000000050101011f0842108421084200000000000fffff01010101110140000000
% 00000000000000000000000000000000000000000000000000180000001f084210842108420000003ffff0000600000000600180000000
% 00000000000000000000000000000000000000000000000000244444447d0842108421084201ffffc00000000c44444444c44600000000
% 00000000000000000000000000000000000000000000000000c00000007d08421084210ffffe0000000000003000000003000c00000000
% 0000000000000000000000000000000000000000000000000110101011bd084210fffff842000000000fffffd01010101c103000000000
% 00000000000000000000000000000000000000000000000006000000033909ffff842108420001fffff000018000000010004000000000
% 0000000000000000000000000000000000000000000000001c4444444ffffe42108421087ffffe00000000024444444464458000000000
% 000000000000000000000000000000000000000000000000200000001c790842109fffffc200000001fffffc0000000080020000000000
% 000000000000000000000000000000000000000000000000c101010164790bffffe4210842007ffffe00003101010103010c0000000000
% 00000000000000000000000000000000000000000000000100000000fffffc421084211fffff8000000000600000000400100000000000
% 0000000000000000000000000000000000000000000000064444444784f1084213ffffe8420000003fffffc44444445c44600000000000
% 0000000000000000000000000000000000000000000000080000000c84f1fffffc842108420fffffc00002000000002000800000000000
% 0000000000000000000000000000000000000000000000311011103fffff0842108423fffff0000000000c11101110d113000000000000
% 0000000000000000000000000000000000000000000000400000007085e108427ffffd084200000000001000000003000c000000000000
% 0000000000000000000000000000000000000000000001c4444444d085ffffff9084210842000007ffffe4444444444450000000000000
% 000000000000000000000000000000000000000000000600000007ffffe108421084210843fffff8000080000000180060000000000000
% 0000000000000000000000000000000000000000000009010101061085e1084210847ffffe000000000301010101210180000000000000
% 00000000000000000000000000000000000000000000300000001a1087e1084fffffa108420000fffffc00000000c00300000000000000
% 0000000000000000000000000000000000000000000044444444621087fffff2108421087fffff00001c44444445444400000000000000
% 0000000000000000000000000000000000000000000180000000ffffffa10842108fffffc2000000006000000006001800000000000000
% 0000000000000000000000000000000000000000000210101013421087a109fffff4210842001fffff9010101018102000000000000000
% 0000000000000000000000000000000000000000000c000000064210fffffe421084210bffffe00003000000003000c000000000000000
% 000000000000000000000000000000000000000000144444445fffff87a1084210fffffc420000000444444444c4470000000000000000
% 0000000000000000000000000000000000000000006000000038421087213fffff8421084203fffff80000000100040000000000000000
% 00000000000000000000000000000000000000000081010101c84217ffffc8421084217ffffc0000610101010701180000000000000000
% 00000000000000000000000000000000000000000300000003fffff88f2108421fffff8842000000c00000000800200000000000000000
% 00000000000000000000000000000000000000000c444444470842108f27fffff0842108427fffff444444447444c00000000000000000
% 000000000000000000000000000000000000000010000000190842fffff9084210842fffff800006000000004001000000000000000000
% 0000000000000000000000000000000000000000701110113fffff109e210843fffff10842000019101110119016000000000000000000
% 000000000000000000000000000000000000000080000000e10842109efffffe1084210842000020000000020008000000000000000000
% 000000000000000000000000000000000000000344444445a1085fffff210842108421084fffffc44444444c4470000000000000000000
% 000000000000000000000000000000000000000400000007ffffe210bc2108421085fffff20003000000003000c0000000000000000000
% 00000000000000000000000000000000000000190101010c21084210bc21087ffffe210842000701010101410100000000000000000000
% 00000000000000000000000000000000000000200000003421084210bfffffc210842109fffff800000001800600000000000000000000
% 00000000000000000000000000000000000000c4444444e4210bfffffc21084210fffffe42003444444446444800000000000000000000
% 0000000000000000000000000000000000000100000001fffffc4210fc211fffff8421084200c00000000c003000000000000000000000
% 00000000000000000000000000000000000006101010168421084213ffffe8421084213fffff1010101010104000000000000000000000
% 000000000000000000000000000000000000180000000c8421fffffcf42108421fffffc842060000000060018000000000000000000000
% 000000000000000000000000000000000000244444447fffff084210f423fffff0842108420c44444444c4460000000000000000000000
% 000000000000000000000000000000000000c000000070842108427ffffd0842108427fffff000000003000c0000000000000000000000
% 0000000000000000000000000000000000010101010190843fffff90f4210843fffff90842c10101010d01300000000000000000000000
% 00000000000000000000000000000000000600000007ffffe1084210e47ffffe1084210843800000001000400000000000000000000000
% 00000000000000000000000000000000000c4444444e108421084fffffa108421084210846444444446445800000000000000000000000
% 0000000000000000000000000000000000300000003a1087fffff211e42108421084fffffc000000008002000000000000000000000000
% 000000000000000000000000000000000051101110fffffc21084211c421087fffff21087011101113111e000000000000000000000000
% 000000000000000000000000000000000180000001c2108421084213cfffffc21084210840000000040011000000000000000000000000
% 0000000000000000000000000000000002444444474210842109fffff4210842109fffffc44444445c4464c00000000000000000000000
% 000000000000000000000000000000000c0000000c4210fffffe4213c4210fffffe4210e00000000200080300000000000000000000000
% 00000000000000000000000000000000310101013fffff8421084213fffff8421084210d01010101c103010c0000000000000000000000
% 000000000000000000000000000000004000000060421084213fffff8421084213fffff800000003000c00030000000000000000000000
% 00000000000000000000000000000001c4444445c0421fffffc842178421fffffc84216444444444445444448000000000000000000000
% 0000000000000000000000000000000200000003fffff0842108423fffff08421084218000000018006000006000000000000000000000
% 0000000000000000000000000000000c1010101e0042108427ffffdf842108427fffff1010101030109010101800000000000000000000
% 00000000000000000000000000000010000000180043fffff908421f843fffff90842c00000000c0030000000600000000000000000000
% 000000000000000000000000000000644444447ffffe1084210847ffffe108421084344444444544444444444580000000000000000000
% 00000000000000000000000000000080000000c000421084fffffa1e8421084fffffe00000000600180000000060000000000000000000
% 0000000000000000000000000000030101010300007fffff2108421e87fffff21085810101010901210101010110000000000000000000
% 0000000000000000000000000000040000000fffffc210842108fffffc2108421087000000003000c0000000000c000000000000000000
% 00000000000000000000000000001c44444458000042109fffff421e84210842108c44444444c447444444444447000000000000000000
% 000000000000000000000000000060000000700007ffffe42108421c842109fffffc000000010004000000000000c00000000000000000
% 000000000000000000000000000090111011fffff84210842108423cfffffe4210f1101110171019101110111011300000000000000000
% 000000000000000000000000000300000003000000421084211fffff8421084211c00000000800200000000000000c0000000000000000
% 0000000000000000000000000004444444460000004213ffffe8423884213fffffc44444447444c4444444444444460000000000000000
% 0000000000000000000000000018000000180000fffffc842108427fffffc8421c00000000400100000000000000018000000000000000
% 00000000000000000000000000210101017fffff0042108423fffff8842108421901010101810701010101010101016000000000000000
% 00000000000000000000000000c0000000c0000000427ffffd0842788427fffff000000002000800000000000000001800000000000000
% 000000000000000000000000014444444780001fffff9084210843fffff90842c44444444c447444444444444444444600000000000000
% 0000000000000000000000000600000007ffffe0004210847ffffef084210843000000003000c000000000000000000100000000000000
% 000000000000000000000000081010101c000000004fffffa10842f084fffffe10101010501110101010101010101010c0000000000000
% 00000000000000000000000030000000300003fffff2108421087fffff2108580000000180060000000000000000000030000000000000
% 000000000000000000000000c4444444fffffc000042108fffffc3f08421087444444446444c444444444444444444444c000000000000
% 000000000000000000000001000000038000000001fffff4210843f09fffffc00000000c00300000000000000000000003000000000000
% 0000000000000000000000070101010600007ffffe421084210fffffe4210b010101011101410101010101010101010101c00000000000
% 0000000000000000000000080000001fffff8000004211fffff843d084210e000000006001800000000000000000000000200000000000
% 00000000000000000000003444444470000000003ffffe84210843d084211c44444444c446444444444444444444444444580000000000
% 000000000000000000000040000000e0000fffffc0421084210843d3fffff800000003000c000000000000000000000000060000000000
% 000000000000000000000191101113fffff000000042108421fffffc8421d0111011141130111011101110111011101110170000000000
% 000000000000000000000200000007000000000000423fffff084790842380000000180040000000000000000000000000090000000000
% 000000000000000000000c4444444c0000000007ffffd084210847ffffff444444446445c4444444444444444444444444750000000000
% 0000000000000000000030000000300001fffff8004210843fffff90843c000000008002c0000000000000000000000000410000000000
% 0000000000000000000041010101fffffe0000000047ffffe1084710843101010103010c31010101010101010101010101810000000000
% 00000000000000000001800000018000000000fffffa108421084fffffe00000000400100c000000000000000000000002010000000000
% 000000000000000000024444444700003fffff0000421087ffffff1085c44444445c44600244444444444444444444444c450000000000
% 0000000000000000000c0000000fffffc000000000fffffc21084f10860000000020008001800000000000000000000010010000000000
% 0000000000000000001010101038000000001fffff42108421085e109c10101010d0130000701010101010101010101070110000000000
% 00000000000000000060000000600007ffffe0000042108421085e10b00000000100040000180000000000000000000180010000000000
% 000000000000000000c4444445fffff8000000000042108421085e10e44444444644580000064444444444444444444644470000000000
% 00000000000000000300000001800000000000000042108421085e11800000001800600000010000000000000000000c00040000000000
% 00000000000000000501010101600000000000000042108421087e1701010101210180000000c101010101010101011101180000000000
% 00000000000000001800000000180000000000000042108421087e1c00000000c003000000003000000000000000006000200000000000
% 000000000000000064444444444c0000000000000042108421087e34444444454444000000000c4444444444444444c444c00000000000
% 00000000000000008000000000030000000000000042108421087a70000000060018000000000300000000000000030001000000000000
% 0000000000000003101110111011c000000000000042108421087b91101110191020000000000091101110111011141116000000000000
% 00000000000000040000000000003000000000000042108421087e000000003000c0000000000060000000000000180018000000000000
% 000000000000001c4444444444444c00000000000042108421087c4444444444450000000000001c444444444444644460000000000000
% 0000000000000020000000000000070000000000004210842108f0000000018006000000000000060000000000008000c0000000000000
% 00000000000000c1010101010101018000000000004210842108e101010107011c00000000000001810101010103010100000000000000
% 00000000000001000000000000000060000000000042108421098000000008002400000000000000400000000004000600000000000000
% 000000000000064444444444444444580000000000421084210b444444447444c40000000000000034444444445c444800000000000000
% 000000000000080000000000000000060000000000421084210c00000000400184000000000000000c0000000020003000000000000000
% 0000000000003010101010101010101380000000004210842130101010119016840000000000fffffc10101010d010c000000000000000
% 000000000000c0000000000000000000e00000000042108421600000000200088400003fffff0000100000000100010000000000000000
% 00000000000144444444444444444444700000000042108421c44444444c44708fffffc000000000644444444644460000000000000000
% 000000000006000000000000000000000c00000000421084230000000010007ff40000000003ffff800000001800080000000000000000
% 0000000000090101010101010101010103000000004210842d010101016101908400000ffffc0003010101012101300000000000000000
% 0000000000300000000000000000000000c00000004210843800000001800610847ffff00000000400000000c000400000000000000000
% 0000000000444444444444444444444444700000004210846444444446444bffff8000000000001c444444454445800000000000000000
% 00000000018000000000000000000000001c000000421085800000000c003e108400000003fffff0000000060006000000000000000000
% 00000000021110111011101110111011101600000042108710111011101142108400fffffc0000d1101110191018000000000000000000
% 000000000c0000000000000000000000000180000042108e000000006001c23fffff000000000300000000300030000000000000000000
% 00000000144444444444444444444444444460000042109c44444444c447ffd0840000007ffffe44444444444440000000000000000000
% 0000000060000000000000000000000000003800004210f000000003000c4210841fffff80001800000001800180000000000000000000
% 0000000061010101010101010101010101010e00004210c101010105011847ffffe0000000002101010107010200000000000000000000
% 00000000580000000000000000000000000003800042138000000018007ffa108400000fffffc000000008000c00000000000000000000
% 00000000444444444444444444444444444444c000421644444444644588421087fffff000014444444474445000000000000000000000
% 000000004300000000000000000000000000003000421800000000800308fffffc00000000060000000040006000000000000000000000
% 0000000050d0101010101010101010101010101c00427010101013101fff42108400000000081010101190118000000000000000000000
% 00000000403000000000000000000000000000070042c0000000040011084210840001fffff80000000200020000000000000000000000
% 00000000444c4444444444444444444444444445c043c44444445c4461084210fffffe0000c44444444c444c0000000000000000000000
% 00000000400300000000000000000000000000007046000000002000a11fffff8400000001000000001000100000000000000000000000
% 0000000041018101010101010101010101010101185f01010101c103ffe8421084003fffff010101016101600000000000000000000000
% 00000000600060000000000000000000000000000e7000000001000421084217ffffc00008000000018000800000000000000000000000
% 000000001c445c4444444444444444444444444447e444444446445c21fffff88400000034444444464447000000000000000000000000
% 0000000004000600000000000000000000000000004000000018007fff0842108407ffffe00000000c000c000000000000000000000000
% 00000000031111911011101110111011101110111011101110311084210843fffff8000190111011101110000000000000000000000000
% 0000000000c000600000000000000000000000000000000000c003847ffffe108400000200000000600060000000000000000000000000
% 000000000034445444444444444444444444444444444444454447ffa108421084fffffc44444444c44480000000000000000000000000
% 00000000000c000c000000000000000000000000000000000600188421087fffff00001000000003000300000000000000000000000000
% 0000000000030103010101010101010101010101010101010901308fffffc2108400006101010105010400000000000000000000000000
% 0000000000008000c00000000000000000000000000000003000fff4210842109fffff8000000018001800000000000000000000000000
% 00000000000064447444444444444444444444444444444444451084210fffffe400024444444464446000000000000000000000000000
% 000000000000180008000000000000000000000000000001800611fffff8421084000c0000000080008000000000000000000000000000
% 000000000000061016101010101010101010101010101016101ffe84210842108400101010101310130000000000000000000000000000
% 0000000000000180018000000000000000000000000000080022108421084213fffff00000000400040000000000000000000000000000
% 00000000000000644464444444444444444444444444447444c2108421fffffc8400c44444445c44580000000000000000000000000000
% 00000000000000100018000000000000000000000000004001c23fffff0842108403000000002000200000000000000000000000000000
% 000000000000000d0107010101010101010101010101018107ffd0842108427fffff01010101c101c00000000000000000000000000000
% 0000000000000003000100000000000000000000000002000f4210843fffff908418000000010003000000000000000000000000000000
% 0000000000000000c444c444444444444444444444444c447f47ffffe10842108464444444464444000000000000000000000000000000
% 0000000000000000300030000000000000000000000010007ffa108421084fffffc0000000180018000000000000000000000000000000
% 000000000000000008111c111011101110111011101170118f421087fffff2108711101110311020000000000000000000000000000000
% 0000000000000000060003000000000000000000000180071efffffc210842108400000000c000c0000000000000000000000000000000
% 000000000000000001c444c444444444444444444446444fff4210842109fffffc44444445444500000000000000000000000000000000
% 0000000000000000006000600000000000000000000c00311e4210fffffe4210a000000006000600000000000000000000000000000000
% 0000000000000000001901190101010101010101011101611fffff8421084210c101010109011800000000000000000000000000000000
% 0000000000000000000600060000000000000000006001fffc421084213fffff8000000030002000000000000000000000000000000000
% 000000000000000000014445c44444444444444444c446213f421fffffc84216444444444444c000000000000000000000000000000000
% 00000000000000000000c000600000000000000003000c23fffff084210842180000000180010000000000000000000000000000000000
% 000000000000000000003010101010101010101014101ffd78621084210842301010101610160000000000000000000000000000000000
% 000000000000000000000c000c0000000000000018006421785a108427fffff00000000800080000000000000000000000000000000000
% 0000000000000000000003444744444444444444644584217847fffff90843444444447444700000000000000000000000000000000000
% 00000000000000000000008000c00000000000008002847fffff9084210846000000004000c00000000000000000000000000000000000
% 0000000000000000000000610131010101010103010fffa1f8425084ffffff010101018101000000000000000000000000000000000000
% 000000000000000000000058000c00000000000400108421f87fffff210870000000020006000000000000000000000000000000000000
% 0000000000000000000001c6444644444444445c44708fffffc21c842108444444444c4448000000000000000000000000000000000000
% 000000000000000000000201800180000000002000fff421e842139fffffc0000000100030000000000000000000000000000000000000
% 000000000000000000000c1170117011101110d113108421efffffe4210f101110117011400000000003fffff000000000000000000000
% 00000000000000000000300010001800000001000611fffff84210a421080000000180018000007ffffc00000000000000000000000000
% 0000000000000000000044444c444644444446445ffe8421e84213fffffc4444444644461fffff80000000000000000000000000000000
% 000000000000000000018000030001000000180062108423fffffc8621400000000fffffe0000000000000000000000000000000000000
% 00000000000000000003010101c101c101012101c23fffffc8421085a18101fffff9013800000000000000000000000000000000000000
% 0000000000000000000c0000003000300000c003ffd08423c84210847fffff000060007800000000000000000000000000000000000000
% 000000000000000000144444445c444c444544444210842388427ffffe44444444c445f800000000000000000000000000000000000000
% 000000000000000000600000007e0003000600184210843fffff90843c000000030002f800000000000000000000000000000000000000
% 00000000000000000090101010c19010d018102847ffffe7884210847310101014101cf800000000000000000000000000000000000000
% 00000000000000000300000001006000203000fffa108427884fffffe0c00000180011f800000000000000000000000000000000000000
% 00000000000000000c44444446001c445c444508421087fffff2108764644444644463f800000000000000000000000000000000000000
% 0000000000000000100000000ffffe0007800708fffffc2f0842108c20180000800183f800000000000000000000000000000000000000
% 0000000000000000610101013000010101011fff4210842f09fffffd21070103010203f800000000000000000000000000000000000000
% 000000000000000080000000c00007c0010021084210fffffe4210e020018004000c008000000000000000000000000000000000000000
% 000000000000000344444445fffff8344544e11fffff843f084210c46444645c4450008000000000000000000000000000000000000000
% 0000000000000004000000060000000c0101ffe84210843f3fffff80200010200060008000000000000000000000000000000000000000
% 0000000000000019101110180000ffff11162108421fffffc842141130111cd11080008000000000000000000000000000000000000000
% 00000000000000200000003fffff0000c10c23fffff0843d08421800200003000300010000000700000000000000000000000000000000
% 00000000000000c44444444000000000657ffd084210843ffffff444644446c44c0001000010e880000000000000000000000000000000
% 000000000000030000000180001fffff9944210843fffffd0842c000200008301000020000110880000000000000000000000000000000
% 0000000000000501010107ffffe0000007847ffffe1084390843010121013109600002000011c700000000000000000000000000000000
% 000000000000180000000c000000000fffffa10842108479084600002000c006800004000010e000000000000000000000000000000000
% 00000000000024444444700003fffff000842108421084fffffe4444644544478000040000102000000000000000000000000000000000
% 000000000000c0000000fffffc000000008421087fffff7908600000200600046000080000fc2000000000000000000000000000000000
% 00000000000110101011800000000000008fffffc21084f108d01010301810181800080000102000000000000000000000000000000000
% 000000000006000000020000000001fffff4210842109fffffc0000020300060040010000013c000000000000000000000000000000000
% 00000000000c4444444c00007ffffe000084210fffffe4f10e444444644444800300200000000000000000000000000000000000000000
% 0000000000300000001fffff8000000001fffff8421084f1080000002180030000c0200000000000000000000000000000000000000000
% 0000000000c101010160000000003ffffe842108421085e139010101230104000030400000000000000000000000000000000000000000
% 00000000010000000080000fffffc00000842108421085e1c00000002c0018000008800000000000000000000000000000000000000000
% 000000000644444447fffff00000000000842108421085e144444444744460000007000000000000000000000000000000000000000000
% 0000000008000000030000000000000000842108421085e7000000006000c0000003800000000000000000000000000000000000000000
% 000000003011101110c000000000000000842108421087e910111011b01300000004600000000000000000000000000000000000000000
% 0000000040000000002000000000000000842108421087f000000002200400000008180000000000000000000000000000000000000000
% 00000001c4444444445800000000000000842108421087e44444444c645800000010040000000000000000000000000000000000000000
% 00000002000000000006000000000000008421084210878000000010202000000020030000000000000000000000000000000000000000
% 0000000d01010101010180000000000000842108421087010101016121c00000004000c000000000000000000000000000000000000000
% 000000300000000000006000000000000084210842108c0000000080210000000180003000000000000000000000000000000000000000
% 00000044444444444444500000000000008421084210b44444444744660000000200000c00000000000000000000000000000000000000
% 000001800000000000000c0000000000008421084210c00000000c00380000000c00000200000000000000000000000000000000000000
% 00000210101010101010130000000000008421084211901010101010200000003000000180000000000000000000000000000000000000
% 00000c0000000000000000c000000000008421084212000000006000e00000004000000060000000000000000000000000000000000000
% 0000144444444444444444700000000000842108421c44444444c445200000018000000000000000000000000000000000000000000000
% 000060000000000000000008000000000084210842100000000300062000000e0000000000000000000000000000000000000000000000
% 00008101010101010101010600000000008421084261010101050108203c00700000000000000000000000000000000000000000000000
% 0003000000000000000000018000000000842108428000000018003020fc07800000000000000000000000000000000000000000000000
% 000c44444444444444444444600000000084210843444444446444c027fcf8000000000000000000000000000000000000000000000000
% 00100000000000000000000018000000008421084600000000c001003fff00000000000000000000000000000000000000000000000000
% 007110111011101110111011160000000084210858111011131116003ffc00000000000000000000000000000000000000000000000000
% 00800000000000000000000001000000008421086000000004000800207c00000000000000000000000000000000000000000000000000
% 03444444444444444444444444c0000000842108c44444445c447000200000000000000000000000000000000000000000000000000000
% 040000000000000000000000003000000084210b4000000020004000200000000000000000000000000000000000000000000000000000
% 190101010101010101010101010c00000084210d01010101c1018000200000000000000000000000000000000000000000000000000000
% 20000000000000000000000000030000008421180000000100020000200000000000000000000000000000000000000000000000000000
% c44444444444444444444444444480000084212c44444446444c0000200000000000000000000000000000000000000000000000000000
% c0000000000000000000000000006000008421c00000000800300000200000000000000000000000000000000000000000000000000000
% f0101010101010101010101010101800008421101010103010400000200000000000000000000000000000000000000000000000000000
% b800000000000000000000000000060000842700000000c001800000200000000700000000000000000000000000000000000000000000
% ce44444444444444444444444444458000843c44444445444600000020000010e880000000000000000000000000000000000000000000
% 8780000000000000000000000000004000842000000006000c000000200000110880000000000000000000000000000000000000000000
% 81e101010101010101010101010101300084e101010109011000000020000011c700000000000000000000000000000000000000000000
% 8078000000000000000000000000000c00850000000030006000000020000010e000000000000000000000000000000000000000000000
% c45c4444444444444444444444444447008644444444444580000000200000102000000000000000000000000000000000000000000000
% 80070000000000000000000000000000c08c00000001800200000000200000fc2000000000000000000000000000000000000000000000
% 9011d01110111011101110111011101120b510111013101c00000000200000102000000000000000000000000000000000000000000000
% c000f00000000000000000000000000018c00000000c00100000000020000013c000000000000000000000000000000000000000000000
% 34447c4444444444444444444444444447c444444474446000000000200000000000000000000000000000000000000000000000000000
% 0c000e00000000000000000000000000008000000040008000000000200000000000000000000000000000000000000000000000000000
% 03010381010101010101010101010101010101010181030000000000200000000000000000000000000000000000000000000000000000
% 018000e00000000000000000000000000000000002000c0000000000200000000000000000000000000000000000000000000000000000
% 0064447c444444444444444444444444444444444c44500000000000200000000000000000000000000000000000000000000000000000
% 0018001c000000000000000000000000000000001000600000000000200000000000000000000000000000000000000000000000000000
% 00061017101010101010101010101010101010107010800000000000200000000000000000000000000000000000000000000000000000
% 00018001c00000000000000000000000000000008003000000000000200000000000000000000000000000000000000000000000000000
% 00006444744444444444444444444444444444474444000000000000200000000000000000000000000000000000000000000000000000
% 000010001c00000000000000000000000000000c001c000000000000200000000000000000000000000000000000000000000000000000
% 00000d010f010101010101010101010101010111017c000000000000200000000000000000000000000000000000000000000000000000
% 000003000380000000000000000000000000006000b8000000000000200000000000000000000000000000000000000000000000000000
% 000000c444e444444444444444444444444444c44778000000000000200000000000000000000000000000000000000000000000000000
% 00000030003800000000000000000000000003000478000000000000200000000000000000000000000000000000000000000000000000
% 0000000d101f10111011101110111011101114111878000000000000200000000000000000000000000000000000000000000000000000
% 00000003000300000000000000000000000018002070000000000000200000000000000000000000000000000000000000000000000000
% 00000000c445c444444444444444444444446444c0f0000000000000200000000000000000000000000000000000000000000000000000
% 000000006000700000000000000000000000c00300f0000000000000200000000000000000000000000000000000000000000000000000
% 0000000019011d0101010101010101010103010400e0000000000000200000000000000000000000000000000000000000000000000000
% 000000000600060000000000000000000004001801e0000000000000000000000000000000000000000000000000000000000000000000
% 0000000001c445c44444444444444444445c446001e0000000000000000000000000000000000000000000000000000000000000000000
% 00000000006000e00000000000000000002000c001e0000000000000000000000000000000000000000000000000000000000000000000
% 0000000000181038101010101010101010d0110001c0000000000000000000000000000000000000000000000000000000000000000000
% 000000000004000e00000000000000000100060003c0000000000000000000000000000000000000000000000000000000000000000000
% 000000000003444744444444444444444644580003c0000000000000000000000000000000000000000000000000000000000000000000
% 000000000000c000c000000000000000080020000380000000000000000000000000000000000000000000000000000000000000000000
% 000000000000310131010101010101013101c0000780000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000c001c00000000000000c00100000780000000000000000000000000000000000000000000000000000000000000000000
% 00000000000003444744444444444445444600000780000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000800180000000000006000800000700000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000711071101110111019103000000f00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000180018000000000030004000000f00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000064446444444444444458000000e00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000018003800000000180060000001e00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000006101c10101010301080000001e00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000001800300000000c00300000001e00000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000004444c4444447444400000001c00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000300030000004001800000003c00000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000d0119010119012000000003c00000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000003000600002000c000000003c00000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000c445c444c4470000000003800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000003000600100040000000007800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000c10181610180000000007800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000200040800200000000007000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000001c4477444c0000000000f000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000006000e00100000000000f000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000001911211600000000000f000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000600201800000000000e000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000001c4646000000000001e000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000006020c000000000001e000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000010310000000000000c000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000c2600000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000036800000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save
countdictstack
mark
newpath
/showpage {} def
%%EndProlog
%%Page 1 1
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch true def %%fixfm5
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

false { %%fixfm5 - $0
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
%%fixfm5 - $0
false %%fixfm5 - $0
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
pop %%fixfm5 - $0
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
%%fixfm5 - $0
%%fixfm5 - $0
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/fake_set_paper_name { %%fixfm5 - $0
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

(5.0) FMVERSION
1 1 0 0 612 792 0 1 2 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 297 540 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 386.75 387.26 578 488.96 521.75 191.7 330.5 4 Y
5 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
160.3 410.99 350.73 533.56 415.88 497.51 225.45 374.94 4 Y
7 X
V
0 X
N
90 450 1.5 1.5 74.33 349.05 676.57 GG
349.45 678.01 345.8 679.04 353.03 690.77 353.11 676.99 4 Y
3 H
0 Z
N
349.45 678.01 345.8 679.04 353.03 690.77 353.11 676.99 4 Y
V
251 327 349.05 676.57 2 L
2 Z
N
160.24 411 290.74 417.08 2 L
0.5 H
N
337.17 628.44 363.85 645.61 2 L
N
0 90 7.65 29.75 348.94 641 A
368.34 428.79 367.9 437.77 374.15 438.4 3 Y
7 X
V
N
374.31 439 374.31 430 368.05 430 3 Y
0 X
V
N
0 12 Q
(45) 337.63 376.1 T
0 9.6 Q
(o) 349.63 380.9 T
0 12 Q
(45) 385.96 416.1 T
0 9.6 Q
(o) 397.96 420.9 T
0 12 Q
(45) 359.02 658.35 T
0 9.6 Q
(o) 371.02 663.15 T
0 12 Q
(nominal 45) 176.48 630.5 T
0 9.6 Q
(o) 230.82 635.3 T
0 12 Q
( particle trajectory) 235.62 630.5 T
225.79 375.27 225.79 452.89 2 L
N
230.8 378.46 230.8 456.09 2 L
N
165.24 414.2 295.74 420.28 2 L
N
235.81 381.86 235.81 459.49 2 L
N
170.25 417.6 300.75 423.67 2 L
N
240.81 385.07 240.81 462.69 2 L
N
175.26 420.8 305.76 426.88 2 L
N
245.68 388.07 245.68 465.69 2 L
N
180.12 423.8 310.62 429.88 2 L
N
250.69 391.27 250.69 468.89 2 L
N
185.13 427 315.63 433.08 2 L
N
255.69 394.67 255.69 472.29 2 L
N
190.14 430.4 320.64 436.48 2 L
N
260.7 397.86 260.7 475.49 2 L
N
195.14 433.6 325.64 439.67 2 L
N
265.98 401.07 265.98 478.69 2 L
N
200.43 436.8 330.93 442.88 2 L
N
270.99 404.27 270.99 481.89 2 L
N
205.43 440 335.93 446.08 2 L
N
276 407.67 276 485.29 2 L
N
210.44 443.4 340.94 449.48 2 L
N
281 410.86 281 488.49 2 L
N
215.45 446.6 345.95 452.67 2 L
N
285.87 413.86 285.87 491.49 2 L
N
220.32 449.6 350.81 455.67 2 L
N
290.88 417.06 290.88 494.69 2 L
N
225.32 452.8 355.82 458.88 2 L
N
295.88 420.46 295.88 498.09 2 L
N
230.33 456.2 360.83 462.27 2 L
N
300.89 423.66 300.89 501.29 2 L
N
235.33 459.4 365.83 465.48 2 L
N
306.04 426.86 306.04 504.48 2 L
N
240.48 462.6 370.98 468.67 2 L
N
311.04 430.06 311.04 507.68 2 L
N
245.49 465.8 375.98 471.88 2 L
N
316.05 433.46 316.05 511.08 2 L
N
250.49 469.2 380.99 475.27 2 L
N
321.05 436.66 321.05 514.29 2 L
N
255.5 472.4 386 478.48 2 L
N
325.92 439.66 325.92 517.29 2 L
N
260.37 475.4 390.86 481.48 2 L
N
330.93 442.86 330.93 520.48 2 L
N
265.37 478.6 395.87 484.67 2 L
N
335.93 446.26 335.93 523.89 2 L
N
270.38 482 400.88 488.07 2 L
N
340.94 449.46 340.94 527.08 2 L
N
275.39 485.2 405.88 491.27 2 L
N
350.91 455.96 350.91 533.58 2 L
N
285.36 491.7 415.86 497.77 2 L
N
346.05 452.76 346.05 530.39 2 L
N
280.49 488.5 410.99 494.57 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
123.03 486.5 420.29 677.75 522 621.5 224.72 430.25 4 Y
5 X
V
0 X
N
193.33 510.74 383.76 633.31 448.91 597.26 258.47 474.69 4 Y
7 X
V
0 X
N
193.6 511.03 383.84 633.42 2 L
N
258.68 474.83 448.93 597.22 2 L
N
193.46 510.83 258.55 474.83 2 L
N
383.98 633.42 449.07 597.42 2 L
N
258.82 475.02 258.82 552.64 2 L
N
193.27 510.75 323.77 516.83 2 L
N
263.83 478.21 263.83 555.84 2 L
N
198.27 513.95 328.77 520.03 2 L
N
268.84 481.61 268.84 559.24 2 L
N
203.28 517.35 333.78 523.42 2 L
N
273.84 484.82 273.84 562.44 2 L
N
208.29 520.55 338.79 526.62 2 L
N
278.71 487.82 278.71 565.44 2 L
N
213.15 523.55 343.65 529.62 2 L
N
283.72 491.02 283.72 568.64 2 L
N
218.16 526.75 348.66 532.83 2 L
N
288.72 494.42 288.72 572.04 2 L
N
223.17 530.15 353.67 536.22 2 L
N
293.73 497.61 293.73 575.24 2 L
N
228.17 533.35 358.67 539.42 2 L
N
299.01 500.82 299.01 578.44 2 L
N
233.46 536.55 363.96 542.62 2 L
N
304.02 504.02 304.02 581.64 2 L
N
238.46 539.75 368.96 545.83 2 L
N
309.03 507.42 309.03 585.04 2 L
N
243.47 543.15 373.97 549.22 2 L
N
314.03 510.61 314.03 588.24 2 L
N
248.48 546.35 378.98 552.42 2 L
N
318.9 513.61 318.9 591.24 2 L
N
253.34 549.35 383.84 555.42 2 L
N
323.91 516.81 323.91 594.44 2 L
N
258.35 552.55 388.85 558.62 2 L
N
328.91 520.21 328.91 597.84 2 L
N
263.36 555.95 393.86 562.03 2 L
N
333.92 523.41 333.92 601.04 2 L
N
268.36 559.15 398.86 565.22 2 L
N
339.07 526.61 339.07 604.23 2 L
N
273.51 562.35 404.01 568.42 2 L
N
344.07 529.81 344.07 607.43 2 L
N
278.52 565.55 409.01 571.62 2 L
N
349.08 533.21 349.08 610.84 2 L
N
283.52 568.95 414.02 575.03 2 L
N
354.08 536.41 354.08 614.04 2 L
N
288.53 572.15 419.03 578.22 2 L
N
358.95 539.41 358.95 617.04 2 L
N
293.39 575.15 423.89 581.22 2 L
N
363.96 542.61 363.96 620.23 2 L
N
298.4 578.35 428.9 584.42 2 L
N
368.96 546.01 368.96 623.64 2 L
N
303.41 581.75 433.91 587.82 2 L
N
373.97 549.21 373.97 626.84 2 L
N
308.41 584.95 438.91 591.02 2 L
N
383.94 555.71 383.94 633.34 2 L
N
318.39 591.45 448.89 597.52 2 L
N
379.07 552.51 379.07 630.14 2 L
N
313.52 588.25 444.02 594.32 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
270.77 397.7 351.99 687.3 2 L
3 H
N
260.64 395.02 282.85 409.22 282.85 391.48 260.64 377.28 4 Y
5 X
V
N
282.89 487.78 305.11 501.98 305.11 484.23 282.89 470.02 4 Y
V
N
90.25 377.5 90.25 386.5 192 330.25 192.25 321.75 4 Y
V
0.5 H
0 X
N
123.25 477 123.25 486 225 429.75 225.25 421.25 4 Y
5 X
V
0 X
N
225 430.25 225 421.25 522.25 611.75 522 621.5 4 Y
5 X
V
0 X
N
192.25 330.75 192.25 321.75 489.5 512.25 489.25 522 4 Y
5 X
V
0 X
N
316.05 358.21 316.05 435.83 2 L
N
315.96 436.35 446.46 442.42 2 L
N
285.91 452.96 381.31 400.19 2 L
N
327.48 394.67 327.72 391.7 317.15 393.82 327.24 397.63 4 Y
0 Z
N
327.48 394.67 327.72 391.7 317.15 393.82 327.24 397.63 4 Y
V
372.57 438.75 M
 372.57 417.04 353.59 396.79 327.73 394.69 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF
